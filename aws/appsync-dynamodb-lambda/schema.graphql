input PaginatedInput {
    limit: Int
    nextToken: String
    nested: PaginatedInput
}

input NestedPaginationInput {
    limit: Int
    nextToken: String
}

type Pagination {
    nextToken: String
}
type Employee {
    employeeId: String
    employeeName: String
    offices: GetOfficesResponse
}

type Office {
    officeId: String
    employees: GetEmployeesResponse
    address: String
    countryStateCity: String
    officeName: String
}
type GetEmployeesResponse {
    items: [Employee]
    pagination: Pagination
}

type GetOfficesResponse {
    items: [Office]
    pagination: Pagination
}

type OfficeEmployee {
    office: Office
    employee: Employee
}

type Query {
    getEmployee(nestedPagination: NestedPaginationInput, employeeId: String!): Employee
    getEmployees(pagination: PaginatedInput!): GetEmployeesResponse
    getOffice(nestedPagination: NestedPaginationInput, officeId: String!): Office
    getOffices(pagination: PaginatedInput!): GetOfficesResponse
}

type Mutation {
    putOffice(officeId: String, officeName: String, address: String, countryStateCity: String): Office
    putEmployee(employeeId: String, employeeName: String): Employee
    joinEmployeeAndOffice(officeId: String!, employeeId: String!): OfficeEmployee
}
schema {
    query: Query
    mutation: Mutation
}