service:
  name: ${env:NAME}
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}
  versionFunctions: false
package:
  individually: true
custom:
  userPoolName: ${env:NAME}-${env:STAGE}-user-pool
  webpack:
    includeModules: true
    excludeFiles: ./**/*.test.js
functions:
  - createAuthChallenge:
      handler: functions/cognito-triggers/create-auth-challenge/index.handler
      role: LambdaSnsRole
      dependsOn:
        - CognitoUserPool
        - LambdaSnsRole
      events:
        - cognitoUserPool:
            trigger: CreateAuthChallenge
            pool: ${self:custom.userPoolName}
            existing: true
  - verifyAuthChallenge:
      handler: functions/cognito-triggers/verify-auth-challenge/index.handler
      dependsOn:
        - CognitoUserPool
      events:
        - cognitoUserPool:
            trigger: VerifyAuthChallengeResponse
            pool: ${self:custom.userPoolName}
            existing: true
  - defineAuthChallenge:
      handler: functions/cognito-triggers/define-auth-challenge/index.handler
      dependsOn:
        - CognitoUserPool
      events:
        - cognitoUserPool:
            trigger: DefineAuthChallenge
            pool: ${self:custom.userPoolName}
            existing: true
resources:
  Resources:
    CognitoUserPoolIdentityProviderGoogle:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        AttributeMapping:
          name: name
          email: email
          phone_number: phoneNumbers
        ProviderDetails:
          client_id: ${env:GOOGLE_CLIENT_ID}
          client_secret: ${env:GOOGLE_SECRET_KEY}
          authorize_scopes: openid email phone profile
        ProviderType: Google
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserPoolIdentityProviderFacebook:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Facebook
        AttributeMapping:
          name: name
          email: email
        ProviderDetails:
          client_id: ${env:FACEBOOK_CLIENT_ID}
          client_secret: ${env:FACEBOOK_SECRET_KEY}
          authorize_scopes: public_profile,email
        ProviderType: Facebook
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserPoolIdentityProviderAmazon:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: LoginWithAmazon
        AttributeMapping:
          email: email
          name: name
        ProviderDetails:
          client_id: ${env:AMAZON_CLIENT_ID}
          client_secret: ${env:AMAZON_SECRET_KEY}
          authorize_scopes: profile postal_code
        ProviderType: LoginWithAmazon
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        AutoVerifiedAttributes:
          - phone_number
        MfaConfiguration: "OFF"
        AliasAttributes:
          - phone_number
        SmsConfiguration:
          ExternalId: ${self:service.name}-${self:provider.stage}-external
          SnsCallerArn: !GetAtt SnsRole.Arn
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - CognitoUserPoolIdentityProviderAmazon
        - CognitoUserPoolIdentityProviderGoogle
        - CognitoUserPoolIdentityProviderFacebook
      Properties:
        ClientName: ${self:service.name}-${self:provider.stage}-user-pool-client
        GenerateSecret: false
        SupportedIdentityProviders:
          - Google
          - Facebook
          - LoginWithAmazon
          - COGNITO
        CallbackURLs:
          - ${env:CALLBACK_URL}
        LogoutURLs:
          - ${env:LOGOUT_URL}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - aws.cognito.signin.user.admin
          - profile
          - phone
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_CUSTOM_AUTH
        AllowedOAuthFlowsUserPoolClient: true
        UserPoolId: !Ref CognitoUserPool

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service.name}-${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
    SnsPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Managed policy to provide access to SNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowSNSPublishing
              Effect: Allow
              Action:
                - sns:publish
              Resource: "*"
    SnsRole:
      Type: AWS::IAM::Role
      Description: "An IAM Role to allow Cognito to access SNS"
      DependsOn:
        - SnsPolicy
      Properties:
        RoleName: ${self:service.name}-${self:provider.stage}-sns-role
        ManagedPolicyArns:
          - Ref: SnsPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
    LambdaSnsRole:
      Type: AWS::IAM::Role
      Description: "An IAM Role to allow Lambdas to access SNS"
      DependsOn:
        - LambdaPolicy
        - SnsPolicy
      Properties:
        RoleName: ${self:service.name}-${self:provider.stage}-lambda-sns-role
        ManagedPolicyArns:
          - Ref: SnsPolicy
          - Ref: LambdaPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - lambda.amazonaws.com
    LambdaPolicy:
      Type: AWS::IAM::ManagedPolicy
      DependsOn:
        - SnsPolicy
      Properties:
        Description: Managed policy to provide access to SNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - "Fn::Join":
                    - ":"
                    - - "arn:aws:logs"
                      - Ref: "AWS::Region"
                      - Ref: "AWS::AccountId"
                      - "log-group:/aws/lambda/*:*:*"

  Outputs:
    UserPoolId:
      Description: The Id of the CognitoUserPool
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Description: The Id of the UserPoolClientId
      Value: !Ref CognitoUserPoolClient
